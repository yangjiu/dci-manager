package com.jdsu.drivetest.diag;

import com.jdsu.drivetest.diag.mallinfo.ByValue;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;

/**
 * JNA Wrapper for library <b>c</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface CLibrary extends Library {
    public static final String JNA_LIBRARY_NAME = (com.sun.jna.Platform.isWindows() ? "msvcrt" : "c");
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(CLibrary.JNA_LIBRARY_NAME);
    public static final CLibrary INSTANCE = (CLibrary) Native.loadLibrary(CLibrary.JNA_LIBRARY_NAME, CLibrary.class);
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EEXIST = (int) 17;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ELIBBAD = (int) 80;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOTRECOVERABLE = (int) 131;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long INT64_MAX = (long) (9223372036854775807L);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int MINSIGSTKSZ = (int) 2048;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SI_TKILL = (int) -6;
    /**
     * <i>native declaration : asm-generic/signal-defs.h</i>
     */
    public static final int SIG_UNBLOCK = (int) 1;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SI_SIGIO = (int) -5;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EADDRINUSE = (int) 98;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGTRAP = (int) 5;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ELIBSCN = (int) 81;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ESTALE = (int) 116;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EOWNERDEAD = (int) 130;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EALREADY = (int) 114;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EIO = (int) 5;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int UINT32_MIN = (int) (0);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long UINT_LEAST64_MAX = (long) (-1L);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long UINTPTR_MAX = (long) (4294967295L);
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EISDIR = (int) 21;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EMFILE = (int) 24;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SIGEV_THREAD_ID = (int) 4;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ETXTBSY = (int) 26;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EL3RST = (int) 47;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SA_THIRTYTWO = (int) 0x02000000;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_PATH_MAX = (int) 256;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGIOT = (int) 6;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EBUSY = (int) 16;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_ARG_MAX = (int) 4096;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SI_DETHREAD = (int) -7;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGCONT = (int) 18;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int NL_ARGMAX = (int) 9;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int __SIGRTMIN = (int) 32;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_LEAST16_MIN = (int) (-32768);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EMSGSIZE = (int) 90;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int BUS_OBJERR = (int) (0 | 3);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SIGEV_MAX_SIZE = (int) 64;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SA_ONSTACK = (int) 0x08000000;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final long SIZE_T_MAX = (long) 0xffffffffL;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ENOENT = (int) 2;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EOPNOTSUPP = (int) 95;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int ILL_PRVREG = (int) (0 | 6);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT32_MAX = (int) (2147483647);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EPROTOTYPE = (int) 91;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ECHRNG = (int) 44;
    /**
     * <i>native declaration : asm-generic/signal-defs.h</i>
     */
    public static final int SIG_BLOCK = (int) 0;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOTSOCK = (int) 88;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SI_KERNEL = (int) 0x80;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EPIPE = (int) 32;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_MAX_INPUT = (int) 255;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long UINT_LEAST32_MAX = (long) (4294967295L);
    /**
     * <i>native declaration : errno.h</i>
     */
    public static final int ENOTSUP = (int) 95;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int CLD_STOPPED = (int) (0 | 5);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EISCONN = (int) 106;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SI_USER = (int) 0;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_STREAM_MAX = (int) 8;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGTTIN = (int) 21;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long INT_LEAST64_MIN = (long) (-9223372036854775807L - 1);
    /**
     * <i>native declaration : asm-generic/bitsperlong.h</i>
     */
    public static final int __BITS_PER_LONG = (int) 32;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int TRAP_TRACE = (int) (0 | 2);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SA_ONESHOT = (int) 0x80000000;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_FAST8_MAX = (int) (127);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int WINT_MIN = (int) (-2147483647 - 1);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ESRMNT = (int) 69;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int ILL_BADSTK = (int) (0 | 8);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int __SI_RT = (int) 0;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int CLD_KILLED = (int) (0 | 2);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int ILL_ILLTRP = (int) (0 | 4);
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_SSIZE_MAX = (int) 32767;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGPOLL = (int) 29;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int PTRDIFF_MAX = (int) (2147483647);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGINT = (int) 2;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SIGEV_NONE = (int) 1;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int SIG_ATOMIC_MIN = (int) (-2147483647 - 1);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ECONNREFUSED = (int) 111;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT8_MIN = (int) (-128);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int CLD_TRAPPED = (int) (0 | 4);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_LEAST32_MIN = (int) (-2147483647 - 1);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGKILL = (int) 9;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ELIBEXEC = (int) 83;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int UINT_LEAST8_MAX = (int) (255);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGPROF = (int) 27;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOMEDIUM = (int) 123;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SI_MAX_SIZE = (int) 128;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT16_MAX = (int) (32767);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int UINT16_MAX = (int) (65535);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENONET = (int) 64;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int __SI_FAULT = (int) 0;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_FAST16_MAX = (int) (2147483647);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ESOCKTNOSUPPORT = (int) 94;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int NSIGILL = (int) 8;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGALRM = (int) 14;
    /**
     * <i>native declaration : signal.h</i>
     */
    public static final int _KERNEL__NSIG = (int) 64;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGILL = (int) 4;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int __SI_TIMER = (int) 0;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int CLD_DUMPED = (int) (0 | 3);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SA_NOCLDSTOP = (int) 0x00000001;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOLCK = (int) 37;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ENOMEM = (int) 12;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_NAME_MAX = (int) 14;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOPKG = (int) 65;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_OPEN_MAX = (int) 16;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SA_RESTART = (int) 0x10000000;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ESTRPIPE = (int) 86;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EPROTONOSUPPORT = (int) 93;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGPWR = (int) 30;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOANO = (int) 55;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EHWPOISON = (int) 133;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long INT64_MIN = (long) (-9223372036854775807L - 1);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int NSIGCHLD = (int) 6;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOTCONN = (int) 107;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EREMOTE = (int) 66;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long UINT64_MAX = (long) (-1L);
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int NL_NMAX = (int) 1;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGIO = (int) 29;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGXCPU = (int) 24;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ESPIPE = (int) 29;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int CLD_CONTINUED = (int) (0 | 6);
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EBADF = (int) 9;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ENOSPC = (int) 28;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EBADE = (int) 52;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENAMETOOLONG = (int) 36;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long SIZE_MAX = (long) (4294967295L);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INTPTR_MIN = (int) (-2147483647 - 1);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EBADR = (int) 53;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EDESTADDRREQ = (int) 89;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int __SI_KILL = (int) 0;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGXFSZ = (int) 25;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_SYMLOOP_MAX = (int) 8;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGABRT = (int) 6;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EFAULT = (int) 14;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int TRAP_HWBKPT = (int) (0 | 4);
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final long LONG_LONG_MIN = (long) (0x7fffffffffffffffL - 1);
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_NGROUPS_MAX = (int) 0;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int POLL_PRI = (int) (0 | 5);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EDOTDOT = (int) 73;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int FPE_FLTSUB = (int) (0 | 8);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EWOULDBLOCK = (int) 11;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_FAST32_MAX = (int) (2147483647);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SI_TIMER = (int) (-2);
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ENOTTY = (int) 25;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOCSI = (int) 50;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EL2HLT = (int) 51;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EKEYREJECTED = (int) 129;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int CLD_EXITED = (int) (0 | 1);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOBUFS = (int) 105;
    /**
     * <i>native declaration : signal.h</i>
     */
    public static final int NSIG = (int) (64 + 1);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EDQUOT = (int) 122;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int MB_LEN_MAX = (int) 4;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int WINT_MAX = (int) (2147483647);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SYS_SECCOMP = (int) (0 | 1);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int POLL_MSG = (int) (0 | 3);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGSYS = (int) 31;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EUCLEAN = (int) 117;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EXDEV = (int) 18;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOKEY = (int) 126;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_TTY_NAME_MAX = (int) 9;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ERANGE = (int) 34;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ENOTBLK = (int) 15;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int TRAP_BRKPT = (int) (0 | 1);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOSTR = (int) 60;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int ILL_ILLOPN = (int) (0 | 2);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int PTRDIFF_MIN = (int) (-2147483647 - 1);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGSEGV = (int) 11;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EREMOTEIO = (int) 121;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EIDRM = (int) 43;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ELNRNG = (int) 48;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT8_MAX = (int) (127);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int ILL_ILLOPC = (int) (0 | 1);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int NSIGSYS = (int) 1;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ENXIO = (int) 6;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGQUIT = (int) 3;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGBUS = (int) 7;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long INTMAX_MAX = (long) (9223372036854775807L);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EDEADLOCK = (int) 35;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT16_MIN = (int) (-32768);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int FPE_INTDIV = (int) (0 | 1);
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int NL_SETMAX = (int) 255;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int POLL_OUT = (int) (0 | 2);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGSWI = (int) 32;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_LEAST32_MAX = (int) (2147483647);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EL3HLT = (int) 46;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EADDRNOTAVAIL = (int) 99;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ETOOMANYREFS = (int) 109;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int NL_LANGMAX = (int) 14;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ERESTART = (int) 85;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ECONNABORTED = (int) 103;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ERFKILL = (int) 132;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EUNATCH = (int) 49;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ENOEXEC = (int) 8;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EBADSLT = (int) 57;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int _KERNEL_NSIG = (int) 32;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENETRESET = (int) 102;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int NSIGPOLL = (int) 6;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INTPTR_MAX = (int) (2147483647);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EBADRQC = (int) 56;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOSYS = (int) 38;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EADV = (int) 68;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int PAGE_MASK = (int) (~(4096 - 1));
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ECANCELED = (int) 125;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EKEYREVOKED = (int) 128;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGUSR2 = (int) 12;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGUSR1 = (int) 10;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGTSTP = (int) 20;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EPFNOSUPPORT = (int) 96;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int NSIGBUS = (int) 5;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SEGV_ACCERR = (int) (0 | 2);
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int SSIZE_MAX = (int) 0x7fffffff;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EINPROGRESS = (int) 115;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOPROTOOPT = (int) 92;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SA_NOCLDWAIT = (int) 0x00000002;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOTNAM = (int) 118;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ECHILD = (int) 10;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_RE_DUP_MAX = (int) 255;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EKEYEXPIRED = (int) 127;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGSTKFLT = (int) 16;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EUSERS = (int) 87;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int __SI_MESGQ = (int) 0;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOSR = (int) 63;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int FPE_FLTOVF = (int) (0 | 4);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_FAST32_MIN = (int) (-2147483647 - 1);
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final long LONG_LONG_MAX = (long) 0x7fffffffffffffffL;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int BUS_MCEERR_AO = (int) (0 | 5);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SA_NOMASK = (int) 0x40000000;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int BUS_MCEERR_AR = (int) (0 | 4);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int ILL_PRVOPC = (int) (0 | 5);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOLINK = (int) 67;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX2_EXPR_NEST_MAX = (int) 32;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGSTKSZ = (int) 8192;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EHOSTUNREACH = (int) 113;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EAFNOSUPPORT = (int) 97;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int TMP_MAX = (int) 308915776;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_LEAST8_MAX = (int) (127);
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EROFS = (int) 30;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int FPE_INTOVF = (int) (0 | 2);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGPIPE = (int) 13;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SI_ASYNCIO = (int) -4;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EDOM = (int) 33;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SI_MESGQ = (int) (-3);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int __SI_POLL = (int) 0;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int FPE_FLTINV = (int) (0 | 7);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ELIBMAX = (int) 82;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGWINCH = (int) 28;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int POLL_IN = (int) (0 | 1);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ETIMEDOUT = (int) 110;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int NSIGTRAP = (int) 4;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SA_RESTORER = (int) 0x04000000;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int BUS_ADRALN = (int) (0 | 1);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EHOSTDOWN = (int) 112;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EMLINK = (int) 31;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENETUNREACH = (int) 101;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ECONNRESET = (int) 104;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final long ULONG_LONG_MAX = (long) 0xffffffffffffffffL;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENODATA = (int) 61;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX2_COLL_WEIGHTS_MAX = (int) 2;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long INTMAX_MIN = (long) (-9223372036854775807L - 1);
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int E2BIG = (int) 7;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SEGV_MAPERR = (int) (0 | 1);
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EACCES = (int) 13;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int NL_MSGMAX = (int) 32767;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long UINT_FAST32_MAX = (long) (4294967295L);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SIGEV_THREAD = (int) 2;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SA_SIGINFO = (int) 0x00000004;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EPROTO = (int) 71;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EILSEQ = (int) 84;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOMSG = (int) 42;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int __SI_SYS = (int) 0;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ENOTDIR = (int) 20;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long UINT_FAST64_MAX = (long) (-1L);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int BUS_ADRERR = (int) (0 | 2);
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int NL_TEXTMAX = (int) 255;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX2_BC_SCALE_MAX = (int) 99;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOTEMPTY = (int) 39;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int PAGESIZE = (int) 4096;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int FPE_FLTDIV = (int) (0 | 3);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int NSIGSEGV = (int) 2;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int UINT8_MAX = (int) (255);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int FPE_FLTRES = (int) (0 | 6);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int POLL_HUP = (int) (0 | 6);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SIGEV_SIGNAL = (int) 0;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EMEDIUMTYPE = (int) 124;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENAVAIL = (int) 119;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int PASS_MAX = (int) 128;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX2_BC_BASE_MAX = (int) 99;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_LEAST16_MAX = (int) (32767);
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_LOGIN_NAME_MAX = (int) 9;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGURG = (int) 23;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int PAGE_SIZE = (int) 4096;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ESRCH = (int) 3;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ECOMM = (int) 70;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long UINT32_MAX = (long) (4294967295L);
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ENODEV = (int) 19;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EBADFD = (int) 77;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX2_BC_DIM_MAX = (int) 2048;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EPERM = (int) 1;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_MAX_CANON = (int) 255;
    /**
     * <i>native declaration : malloc.h</i>
     */
    public static final int STRUCT_MALLINFO_DECLARED = (int) 1;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGHUP = (int) 1;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ETIME = (int) 62;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ESHUTDOWN = (int) 108;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int ILL_COPROC = (int) (0 | 7);
    /**
     * <i>native declaration : asm-generic/signal-defs.h</i>
     */
    public static final int SIG_SETMASK = (int) 2;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EAGAIN = (int) 11;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EDEADLK = (int) 35;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EINVAL = (int) 22;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EFBIG = (int) 27;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_SYMLINK_MAX = (int) 255;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGSTOP = (int) 19;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EXFULL = (int) 54;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGUNUSED = (int) 31;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long UINT_FAST16_MAX = (long) (4294967295L);
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX2_LINE_MAX = (int) 2048;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long INT_FAST64_MIN = (long) (-9223372036854775807L - 1);
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_LINK_MAX = (int) 8;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT32_MIN = (int) (-2147483647 - 1);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int __SI_CHLD = (int) 0;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EBADMSG = (int) 74;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ELIBACC = (int) 79;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EISNAM = (int) 120;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long INT_LEAST64_MAX = (long) (9223372036854775807L);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long INT_FAST64_MAX = (long) (9223372036854775807L);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_LEAST8_MIN = (int) (-128);
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int ENFILE = (int) 23;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int UINT_LEAST16_MAX = (int) (65535);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EL2NSYNC = (int) 45;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ELOOP = (int) 40;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGFPE = (int) 8;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENOTUNIQ = (int) 76;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_PIPE_BUF = (int) 512;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int FPE_FLTUND = (int) (0 | 5);
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EMULTIHOP = (int) 72;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EREMCHG = (int) 78;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int SI_QUEUE = (int) -1;
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int POLL_ERR = (int) (0 | 4);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int __SIGRTMAX = (int) 64;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int UINT_FAST8_MAX = (int) (255);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int ILL_ILLADR = (int) (0 | 3);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_FAST8_MIN = (int) (-128);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SA_RESETHAND = (int) 0x80000000;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_CHILD_MAX = (int) 25;
    /**
     * <i>native declaration : asm-generic/errno-base.h</i>
     */
    public static final int EINTR = (int) 4;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX_TZNAME_MAX = (int) 3;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGTTOU = (int) 22;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SA_NODEFER = (int) 0x40000000;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int SIG_ATOMIC_MAX = (int) (2147483647);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int NSIGFPE = (int) 8;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGTERM = (int) 15;
    /**
     * <i>native declaration : signal.h</i>
     */
    public static final int _NSIG = (int) (64 + 1);
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final long UINTMAX_MAX = (long) (-1L);
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGVTALRM = (int) 26;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EBFONT = (int) 59;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int EOVERFLOW = (int) 75;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX2_RE_DUP_MAX = (int) 255;
    /**
     * <i>native declaration : asm-generic/errno.h</i>
     */
    public static final int ENETDOWN = (int) 100;
    /**
     * <i>native declaration : asm/signal.h</i>
     */
    public static final int SIGCHLD = (int) 17;
    /**
     * <i>native declaration : limits.h</i>
     */
    public static final int _POSIX2_BC_STRING_MAX = (int) 1000;
    /**
     * <i>native declaration : stdint.h</i>
     */
    public static final int INT_FAST16_MIN = (int) (-2147483647 - 1);
    /**
     * <i>native declaration : asm-generic/siginfo.h</i>
     */
    public static final int TRAP_BRANCH = (int) (0 | 3);

    /**
     * internal function returning the address of the thread-specific errno<br>
     * Original signature : <code>int* __errno()</code><br>
     * <i>native declaration : errno.h:5</i>
     */
    IntByReference __errno();

    ;

    /**
     * Original signature : <code>void* malloc(size_t)</code><br>
     * <i>native declaration : malloc.h:2</i>
     */
    Pointer malloc(NativeSize byte_count);

    ;

    /**
     * Original signature : <code>void* calloc(size_t, size_t)</code><br>
     * <i>native declaration : malloc.h:4</i>
     */
    Pointer calloc(NativeSize item_count, NativeSize item_size);

    /**
     * Original signature : <code>void* realloc(void*, size_t)</code><br>
     * <i>native declaration : malloc.h:6</i>
     */
    Pointer realloc(Pointer p, NativeSize byte_count);

    /**
     * Original signature : <code>void free(void*)</code><br>
     * <i>native declaration : malloc.h:8</i>
     */
    void free(Pointer p);

    /**
     * Original signature : <code>void* memalign(size_t, size_t)</code><br>
     * <i>native declaration : malloc.h:10</i>
     */
    Pointer memalign(NativeSize alignment, NativeSize byte_count);

    /**
     * Original signature : <code>size_t malloc_usable_size(const void*)</code><br>
     * <i>native declaration : malloc.h:12</i>
     */
    NativeSize malloc_usable_size(Pointer p);

    /**
     * Original signature : <code>mallinfo mallinfo()</code><br>
     * <i>native declaration : malloc.h:26</i>
     */
    ByValue mallinfo();

    /**
     * Original signature : <code>void* memccpy(void*, const void*, int, size_t)</code><br>
     * <i>native declaration : string.h:2</i>
     */
    Pointer memccpy(Pointer voidPtr1, Pointer voidPtr2, int int1, NativeSize size_t1);

    /**
     * Original signature : <code>void* memchr(const void*, int, size_t)</code><br>
     * <i>native declaration : string.h:4</i>
     */
    Pointer memchr(Pointer voidPtr1, int int1, NativeSize size_t1);

    /**
     * Original signature : <code>void* memrchr(const void*, int, size_t)</code><br>
     * <i>native declaration : string.h:6</i>
     */
    Pointer memrchr(Pointer voidPtr1, int int1, NativeSize size_t1);

    /**
     * Original signature : <code>int memcmp(const void*, const void*, size_t)</code><br>
     * <i>native declaration : string.h:8</i>
     */
    int memcmp(Pointer voidPtr1, Pointer voidPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>void* memcpy(void*, const void*, size_t)</code><br>
     * <i>native declaration : string.h:10</i>
     */
    Pointer memcpy(Pointer voidPtr1, Pointer voidPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>void* memmove(void*, const void*, size_t)</code><br>
     * <i>native declaration : string.h:12</i>
     */
    Pointer memmove(Pointer voidPtr1, Pointer voidPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>void* memset(void*, int, size_t)</code><br>
     * <i>native declaration : string.h:14</i>
     */
    Pointer memset(Pointer voidPtr1, int int1, NativeSize size_t1);

    /**
     * Original signature : <code>void* memmem(const void*, size_t, const void*, size_t)</code><br>
     * <i>native declaration : string.h:16</i>
     */
    Pointer memmem(Pointer voidPtr1, NativeSize size_t1, Pointer voidPtr2, NativeSize size_t2);

    /**
     * Original signature : <code>char* strchr(const char*, int)</code><br>
     * <i>native declaration : string.h:18</i><br>
     *
     * @deprecated use the safer methods {@link #strchr(String, int)} and {@link #strchr(com.sun.jna.Pointer, int)} instead
     */
    @Deprecated
    Pointer strchr(Pointer charPtr1, int int1);

    /**
     * Original signature : <code>char* strchr(const char*, int)</code><br>
     * <i>native declaration : string.h:18</i>
     */
    Pointer strchr(String charPtr1, int int1);

    /**
     * Original signature : <code>char* __strchr_chk(const char*, int, size_t)</code><br>
     * <i>native declaration : string.h:20</i><br>
     *
     * @deprecated use the safer methods {@link #__strchr_chk(String, int, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #__strchr_chk(com.sun.jna.Pointer, int, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    Pointer __strchr_chk(Pointer charPtr1, int int1, NativeSize size_t1);

    /**
     * Original signature : <code>char* __strchr_chk(const char*, int, size_t)</code><br>
     * <i>native declaration : string.h:20</i>
     */
    Pointer __strchr_chk(String charPtr1, int int1, NativeSize size_t1);

    /**
     * Original signature : <code>char* strrchr(const char*, int)</code><br>
     * <i>native declaration : string.h:22</i><br>
     *
     * @deprecated use the safer methods {@link #strrchr(String, int)} and {@link #strrchr(com.sun.jna.Pointer, int)} instead
     */
    @Deprecated
    Pointer strrchr(Pointer charPtr1, int int1);

    /**
     * Original signature : <code>char* strrchr(const char*, int)</code><br>
     * <i>native declaration : string.h:22</i>
     */
    Pointer strrchr(String charPtr1, int int1);

    /**
     * Original signature : <code>char* __strrchr_chk(const char*, int, size_t)</code><br>
     * <i>native declaration : string.h:24</i><br>
     *
     * @deprecated use the safer methods {@link #__strrchr_chk(String, int, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #__strrchr_chk(com.sun.jna.Pointer, int, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    Pointer __strrchr_chk(Pointer charPtr1, int int1, NativeSize size_t1);

    /**
     * Original signature : <code>char* __strrchr_chk(const char*, int, size_t)</code><br>
     * <i>native declaration : string.h:24</i>
     */
    Pointer __strrchr_chk(String charPtr1, int int1, NativeSize size_t1);

    /**
     * Original signature : <code>size_t strlen(const char*)</code><br>
     * <i>native declaration : string.h:26</i><br>
     *
     * @deprecated use the safer methods {@link #strlen(String)} and {@link #strlen(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    NativeSize strlen(Pointer charPtr1);

    /**
     * Original signature : <code>size_t strlen(const char*)</code><br>
     * <i>native declaration : string.h:26</i>
     */
    NativeSize strlen(String charPtr1);

    /**
     * Original signature : <code>size_t __strlen_chk(const char*, size_t)</code><br>
     * <i>native declaration : string.h:28</i><br>
     *
     * @deprecated use the safer methods {@link #__strlen_chk(String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #__strlen_chk(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    NativeSize __strlen_chk(Pointer charPtr1, NativeSize size_t1);

    /**
     * Original signature : <code>size_t __strlen_chk(const char*, size_t)</code><br>
     * <i>native declaration : string.h:28</i>
     */
    NativeSize __strlen_chk(String charPtr1, NativeSize size_t1);

    /**
     * Original signature : <code>int strcmp(const char*, const char*)</code><br>
     * <i>native declaration : string.h:30</i><br>
     *
     * @deprecated use the safer methods {@link #strcmp(String, String)} and {@link #strcmp(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    int strcmp(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>int strcmp(const char*, const char*)</code><br>
     * <i>native declaration : string.h:30</i>
     */
    int strcmp(String charPtr1, String charPtr2);

    /**
     * Original signature : <code>char* stpcpy(char*, const char*)</code><br>
     * <i>native declaration : string.h:32</i><br>
     *
     * @deprecated use the safer methods {@link #stpcpy(java.nio.ByteBuffer, String)} and {@link #stpcpy(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    Pointer stpcpy(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>char* stpcpy(char*, const char*)</code><br>
     * <i>native declaration : string.h:32</i>
     */
    Pointer stpcpy(ByteBuffer charPtr1, String charPtr2);

    /**
     * Original signature : <code>char* strcpy(char*, const char*)</code><br>
     * <i>native declaration : string.h:34</i><br>
     *
     * @deprecated use the safer methods {@link #strcpy(java.nio.ByteBuffer, String)} and {@link #strcpy(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    Pointer strcpy(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>char* strcpy(char*, const char*)</code><br>
     * <i>native declaration : string.h:34</i>
     */
    Pointer strcpy(ByteBuffer charPtr1, String charPtr2);

    /**
     * Original signature : <code>char* strcat(char*, const char*)</code><br>
     * <i>native declaration : string.h:36</i><br>
     *
     * @deprecated use the safer methods {@link #strcat(java.nio.ByteBuffer, String)} and {@link #strcat(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    Pointer strcat(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>char* strcat(char*, const char*)</code><br>
     * <i>native declaration : string.h:36</i>
     */
    Pointer strcat(ByteBuffer charPtr1, String charPtr2);

    /**
     * Original signature : <code>int strcasecmp(const char*, const char*)</code><br>
     * <i>native declaration : string.h:38</i><br>
     *
     * @deprecated use the safer methods {@link #strcasecmp(String, String)} and {@link #strcasecmp(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    int strcasecmp(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>int strcasecmp(const char*, const char*)</code><br>
     * <i>native declaration : string.h:38</i>
     */
    int strcasecmp(String charPtr1, String charPtr2);

    /**
     * Original signature : <code>int strncasecmp(const char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:40</i><br>
     *
     * @deprecated use the safer methods {@link #strncasecmp(String, String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strncasecmp(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    int strncasecmp(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>int strncasecmp(const char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:40</i>
     */
    int strncasecmp(String charPtr1, String charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>char* strdup(const char*)</code><br>
     * <i>native declaration : string.h:42</i><br>
     *
     * @deprecated use the safer methods {@link #strdup(String)} and {@link #strdup(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    Pointer strdup(Pointer charPtr1);

    /**
     * Original signature : <code>char* strdup(const char*)</code><br>
     * <i>native declaration : string.h:42</i>
     */
    Pointer strdup(String charPtr1);

    /**
     * Original signature : <code>char* strstr(const char*, const char*)</code><br>
     * <i>native declaration : string.h:44</i><br>
     *
     * @deprecated use the safer methods {@link #strstr(String, String)} and {@link #strstr(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    Pointer strstr(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>char* strstr(const char*, const char*)</code><br>
     * <i>native declaration : string.h:44</i>
     */
    Pointer strstr(String charPtr1, String charPtr2);

    /**
     * Original signature : <code>char* strcasestr(const char*, const char*)</code><br>
     * <i>native declaration : string.h:46</i><br>
     *
     * @deprecated use the safer methods {@link #strcasestr(String, String)} and {@link #strcasestr(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    Pointer strcasestr(Pointer haystack, Pointer needle);

    /**
     * Original signature : <code>char* strcasestr(const char*, const char*)</code><br>
     * <i>native declaration : string.h:46</i>
     */
    Pointer strcasestr(String haystack, String needle);

    /**
     * Original signature : <code>char* strtok(char*, const char*)</code><br>
     * <i>native declaration : string.h:48</i><br>
     *
     * @deprecated use the safer methods {@link #strtok(java.nio.ByteBuffer, String)} and {@link #strtok(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    Pointer strtok(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>char* strtok(char*, const char*)</code><br>
     * <i>native declaration : string.h:48</i>
     */
    Pointer strtok(ByteBuffer charPtr1, String charPtr2);

    /**
     * Original signature : <code>char* strtok_r(char*, const char*, char**)</code><br>
     * <i>native declaration : string.h:50</i><br>
     *
     * @deprecated use the safer methods {@link #strtok_r(java.nio.ByteBuffer, String, com.sun.jna.ptr.PointerByReference)} and {@link #strtok_r(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    Pointer strtok_r(Pointer charPtr1, Pointer charPtr2, PointerByReference charPtrPtr1);

    /**
     * Original signature : <code>char* strtok_r(char*, const char*, char**)</code><br>
     * <i>native declaration : string.h:50</i>
     */
    Pointer strtok_r(ByteBuffer charPtr1, String charPtr2, PointerByReference charPtrPtr1);

    /**
     * Original signature : <code>char* strerror(int)</code><br>
     * <i>native declaration : string.h:52</i>
     */
    Pointer strerror(int int1);

    /**
     * Original signature : <code>int strerror_r(int, char*, size_t)</code><br>
     * <i>native declaration : string.h:54</i><br>
     *
     * @deprecated use the safer methods {@link #strerror_r(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strerror_r(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    int strerror_r(int errnum, Pointer buf, NativeSize n);

    /**
     * Original signature : <code>int strerror_r(int, char*, size_t)</code><br>
     * <i>native declaration : string.h:54</i>
     */
    int strerror_r(int errnum, ByteBuffer buf, NativeSize n);

    /**
     * Original signature : <code>size_t strnlen(const char*, size_t)</code><br>
     * <i>native declaration : string.h:56</i><br>
     *
     * @deprecated use the safer methods {@link #strnlen(String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strnlen(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    NativeSize strnlen(Pointer charPtr1, NativeSize size_t1);

    /**
     * Original signature : <code>size_t strnlen(const char*, size_t)</code><br>
     * <i>native declaration : string.h:56</i>
     */
    NativeSize strnlen(String charPtr1, NativeSize size_t1);

    /**
     * Original signature : <code>char* strncat(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:58</i><br>
     *
     * @deprecated use the safer methods {@link #strncat(java.nio.ByteBuffer, String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strncat(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    Pointer strncat(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>char* strncat(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:58</i>
     */
    Pointer strncat(ByteBuffer charPtr1, String charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>char* strndup(const char*, size_t)</code><br>
     * <i>native declaration : string.h:60</i><br>
     *
     * @deprecated use the safer methods {@link #strndup(String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strndup(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    Pointer strndup(Pointer charPtr1, NativeSize size_t1);

    /**
     * Original signature : <code>char* strndup(const char*, size_t)</code><br>
     * <i>native declaration : string.h:60</i>
     */
    Pointer strndup(String charPtr1, NativeSize size_t1);

    /**
     * Original signature : <code>int strncmp(const char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:62</i><br>
     *
     * @deprecated use the safer methods {@link #strncmp(String, String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strncmp(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    int strncmp(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>int strncmp(const char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:62</i>
     */
    int strncmp(String charPtr1, String charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>char* stpncpy(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:64</i><br>
     *
     * @deprecated use the safer methods {@link #stpncpy(java.nio.ByteBuffer, String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #stpncpy(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    Pointer stpncpy(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>char* stpncpy(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:64</i>
     */
    Pointer stpncpy(ByteBuffer charPtr1, String charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>char* strncpy(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:66</i><br>
     *
     * @deprecated use the safer methods {@link #strncpy(java.nio.ByteBuffer, String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strncpy(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    Pointer strncpy(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>char* strncpy(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:66</i>
     */
    Pointer strncpy(ByteBuffer charPtr1, String charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>size_t strlcat(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:68</i><br>
     *
     * @deprecated use the safer methods {@link #strlcat(java.nio.ByteBuffer, String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strlcat(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    NativeSize strlcat(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>size_t strlcat(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:68</i>
     */
    NativeSize strlcat(ByteBuffer charPtr1, String charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>size_t strlcpy(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:70</i><br>
     *
     * @deprecated use the safer methods {@link #strlcpy(java.nio.ByteBuffer, String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strlcpy(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    NativeSize strlcpy(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>size_t strlcpy(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:70</i>
     */
    NativeSize strlcpy(ByteBuffer charPtr1, String charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>size_t strcspn(const char*, const char*)</code><br>
     * <i>native declaration : string.h:72</i><br>
     *
     * @deprecated use the safer methods {@link #strcspn(String, String)} and {@link #strcspn(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    NativeSize strcspn(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>size_t strcspn(const char*, const char*)</code><br>
     * <i>native declaration : string.h:72</i>
     */
    NativeSize strcspn(String charPtr1, String charPtr2);

    /**
     * Original signature : <code>char* strpbrk(const char*, const char*)</code><br>
     * <i>native declaration : string.h:74</i><br>
     *
     * @deprecated use the safer methods {@link #strpbrk(String, String)} and {@link #strpbrk(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    Pointer strpbrk(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>char* strpbrk(const char*, const char*)</code><br>
     * <i>native declaration : string.h:74</i>
     */
    Pointer strpbrk(String charPtr1, String charPtr2);

    /**
     * Original signature : <code>char* strsep(char**, const char*)</code><br>
     * <i>native declaration : string.h:76</i><br>
     *
     * @deprecated use the safer methods {@link #strsep(com.sun.jna.ptr.PointerByReference, String)} and {@link #strsep(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    Pointer strsep(PointerByReference charPtrPtr1, Pointer charPtr1);

    /**
     * Original signature : <code>char* strsep(char**, const char*)</code><br>
     * <i>native declaration : string.h:76</i>
     */
    Pointer strsep(PointerByReference charPtrPtr1, String charPtr1);

    /**
     * Original signature : <code>size_t strspn(const char*, const char*)</code><br>
     * <i>native declaration : string.h:78</i><br>
     *
     * @deprecated use the safer methods {@link #strspn(String, String)} and {@link #strspn(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    NativeSize strspn(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>size_t strspn(const char*, const char*)</code><br>
     * <i>native declaration : string.h:78</i>
     */
    NativeSize strspn(String charPtr1, String charPtr2);

    /**
     * Original signature : <code>char* strsignal(int)</code><br>
     * <i>native declaration : string.h:80</i>
     */
    Pointer strsignal(int sig);

    /**
     * Original signature : <code>int strcoll(const char*, const char*)</code><br>
     * <i>native declaration : string.h:82</i><br>
     *
     * @deprecated use the safer methods {@link #strcoll(String, String)} and {@link #strcoll(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    int strcoll(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>int strcoll(const char*, const char*)</code><br>
     * <i>native declaration : string.h:82</i>
     */
    int strcoll(String charPtr1, String charPtr2);

    /**
     * Original signature : <code>size_t strxfrm(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:84</i><br>
     *
     * @deprecated use the safer methods {@link #strxfrm(java.nio.ByteBuffer, String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strxfrm(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    NativeSize strxfrm(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>size_t strxfrm(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:84</i>
     */
    NativeSize strxfrm(ByteBuffer charPtr1, String charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>int strcoll_l(const char*, const char*)</code><br>
     * <i>native declaration : string.h:86</i><br>
     *
     * @deprecated use the safer methods {@link #strcoll_l(String, String)} and {@link #strcoll_l(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    int strcoll_l(Pointer charPtr1, Pointer charPtr2);

    /**
     * Original signature : <code>int strcoll_l(const char*, const char*)</code><br>
     * <i>native declaration : string.h:86</i>
     */
    int strcoll_l(String charPtr1, String charPtr2);

    /**
     * Original signature : <code>size_t strxfrm_l(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:88</i><br>
     *
     * @deprecated use the safer methods {@link #strxfrm_l(java.nio.ByteBuffer, String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strxfrm_l(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
     */
    @Deprecated
    NativeSize strxfrm_l(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

    /**
     * Original signature : <code>size_t strxfrm_l(char*, const char*, size_t)</code><br>
     * <i>native declaration : string.h:88</i>
     */
    NativeSize strxfrm_l(ByteBuffer charPtr1, String charPtr2, NativeSize size_t1);

    /**
     * We take a few real-time signals for ourselves. May as well use the same names as glibc.<br>
     * Original signature : <code>int __libc_current_sigrtmin()</code><br>
     * <i>native declaration : signal.h:6</i>
     */
    int __libc_current_sigrtmin();

    /**
     * Original signature : <code>int __libc_current_sigrtmax()</code><br>
     * <i>native declaration : signal.h:8</i>
     */
    int __libc_current_sigrtmax();

    /**
     * Original signature : <code>int sigaction(int, sigaction*, sigaction*)</code><br>
     * <i>native declaration : signal.h:14</i>
     */
    int sigaction(int int1, sigaction sigactionPtr1, sigaction sigactionPtr2);

    /**
     * Original signature : <code>sighandler_t signal(int, sighandler_t)</code><br>
     * <i>native declaration : signal.h:16</i>
     */
    __signalfn_t signal(int int1, __signalfn_t sighandler_t1);

    /**
     * Original signature : <code>int siginterrupt(int, int)</code><br>
     * <i>native declaration : signal.h:18</i>
     */
    int siginterrupt(int int1, int int2);

    /**
     * Original signature : <code>int sigaddset(sigset_t*, int)</code><br>
     * <i>native declaration : signal.h:20</i>
     */
    int sigaddset(NativeLongByReference sigset_tPtr1, int int1);

    /**
     * Original signature : <code>int sigdelset(sigset_t*, int)</code><br>
     * <i>native declaration : signal.h:22</i>
     */
    int sigdelset(NativeLongByReference sigset_tPtr1, int int1);

    /**
     * Original signature : <code>int sigemptyset(sigset_t*)</code><br>
     * <i>native declaration : signal.h:24</i>
     */
    int sigemptyset(NativeLongByReference sigset_tPtr1);

    /**
     * Original signature : <code>int sigfillset(sigset_t*)</code><br>
     * <i>native declaration : signal.h:26</i>
     */
    int sigfillset(NativeLongByReference sigset_tPtr1);

    /**
     * Original signature : <code>int sigismember(const sigset_t*, int)</code><br>
     * <i>native declaration : signal.h:28</i>
     */
    int sigismember(NativeLongByReference sigset_tPtr1, int int1);

    /**
     * Original signature : <code>int sigpending(sigset_t*)</code><br>
     * <i>native declaration : signal.h:30</i>
     */
    int sigpending(NativeLongByReference sigset_tPtr1);

    /**
     * Original signature : <code>int sigprocmask(int, const sigset_t*, sigset_t*)</code><br>
     * <i>native declaration : signal.h:32</i>
     */
    int sigprocmask(int int1, NativeLongByReference sigset_tPtr1, NativeLongByReference sigset_tPtr2);

    /**
     * Original signature : <code>int sigsuspend(const sigset_t*)</code><br>
     * <i>native declaration : signal.h:34</i>
     */
    int sigsuspend(NativeLongByReference sigset_tPtr1);

    /**
     * Original signature : <code>int sigwait(const sigset_t*, int*)</code><br>
     * <i>native declaration : signal.h:36</i><br>
     *
     * @deprecated use the safer methods {@link #sigwait(com.sun.jna.ptr.NativeLongByReference, java.nio.IntBuffer)} and {@link #sigwait(com.sun.jna.ptr.NativeLongByReference, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    int sigwait(NativeLongByReference sigset_tPtr1, IntByReference intPtr1);

    /**
     * Original signature : <code>int sigwait(const sigset_t*, int*)</code><br>
     * <i>native declaration : signal.h:36</i>
     */
    int sigwait(NativeLongByReference sigset_tPtr1, IntBuffer intPtr1);

    /**
     * Original signature : <code>int raise(int)</code><br>
     * <i>native declaration : signal.h:38</i>
     */
    int raise(int int1);

    /**
     * Original signature : <code>int kill(int)</code><br>
     * <i>native declaration : signal.h:40</i>
     */
    int kill(int int1);

    /**
     * Original signature : <code>int killpg(int, int)</code><br>
     * <i>native declaration : signal.h:42</i>
     */
    int killpg(int int1, int int2);

    /**
     * Original signature : <code>int sigaltstack(const stack_t*, stack_t*)</code><br>
     * <i>native declaration : signal.h:44</i>
     */
    int sigaltstack(sigaltstack stack_tPtr1, sigaltstack stack_tPtr2);

    /**
     * Original signature : <code>void psiginfo(const siginfo_t*, const char*)</code><br>
     * <i>native declaration : signal.h:46</i><br>
     *
     * @deprecated use the safer methods {@link #psiginfo(siginfo, String)} and {@link #psiginfo(siginfo, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void psiginfo(siginfo siginfo_tPtr1, Pointer charPtr1);

    /**
     * Original signature : <code>void psiginfo(const siginfo_t*, const char*)</code><br>
     * <i>native declaration : signal.h:46</i>
     */
    void psiginfo(siginfo siginfo_tPtr1, String charPtr1);

    /**
     * Original signature : <code>void psignal(int, const char*)</code><br>
     * <i>native declaration : signal.h:48</i><br>
     *
     * @deprecated use the safer methods {@link #psignal(int, String)} and {@link #psignal(int, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void psignal(int int1, Pointer charPtr1);

    /**
     * Original signature : <code>void psignal(int, const char*)</code><br>
     * <i>native declaration : signal.h:48</i>
     */
    void psignal(int int1, String charPtr1);

    /**
     * WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS<br>
     * <i>native declaration : asm-generic/signal-defs.h:1</i>
     */
    public interface __signalfn_t extends Callback {
        void apply(int int1);
    }

    /**
     * <i>native declaration : asm-generic/signal-defs.h:3</i>
     */
    public interface __restorefn_t extends Callback {
        void apply();
    }
}
