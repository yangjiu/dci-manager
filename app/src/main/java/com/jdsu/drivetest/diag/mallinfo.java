package com.jdsu.drivetest.diag;

import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : malloc.h:24</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class mallinfo extends Structure {
    /**
     * Total number of non-mmapped bytes currently allocated from OS.
     */
    public NativeSize arena;
    /**
     * Number of free chunks.
     */
    public NativeSize ordblks;
    /**
     * (Unused.)
     */
    public NativeSize smblks;
    /**
     * (Unused.)
     */
    public NativeSize hblks;
    /**
     * Total number of bytes in mmapped regions.
     */
    public NativeSize hblkhd;
    /**
     * Maximum total allocated space; greater than total if trimming has occurred.
     */
    public NativeSize usmblks;
    /**
     * (Unused.)
     */
    public NativeSize fsmblks;
    /**
     * Total allocated space (normal or mmapped.)
     */
    public NativeSize uordblks;
    /**
     * Total free space.
     */
    public NativeSize fordblks;
    /**
     * Upper bound on number of bytes releasable by malloc_trim.
     */
    public NativeSize keepcost;

    public mallinfo() {
        super();
    }

    public mallinfo(Pointer peer) {
        super(peer);
    }

    protected List<?> getFieldOrder() {
        return Arrays.asList("arena", "ordblks", "smblks", "hblks", "hblkhd", "usmblks", "fsmblks", "uordblks", "fordblks", "keepcost");
    }

    public static class ByReference extends mallinfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends mallinfo implements Structure.ByValue {

    }

    ;
}
