package com.jdsu.drivetest.diag;

import com.ochafik.lang.jnaerator.runtime.globals.GlobalInt;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.ShortByReference;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;

/**
 * JNA Wrapper for library <b>diag</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface DiagLibrary extends Library {
    public static final String JNA_LIBRARY_NAME = "diag";
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(DiagLibrary.JNA_LIBRARY_NAME);
    /**
     * Token to identify QSC log
     */
    public static final GlobalInt logging_mode = new GlobalInt(DiagLibrary.JNA_NATIVE_LIB, "logging_mode");
    public static final GlobalInt diag_disable_console = new GlobalInt(DiagLibrary.JNA_NATIVE_LIB, "diag_disable_console");
    ;
    public static final DiagLibrary INSTANCE = (DiagLibrary) Native.loadLibrary(DiagLibrary.JNA_LIBRARY_NAME, DiagLibrary.class);
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DCI_EVENT_TYPE = (int) -2;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int USER_SPACE_DATA_TYPE = (int) 0x00000020;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int CONTROL_CHAR = (int) 0x7E;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int DIAG_PROC_DCI = (int) 1;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int PKT_TYPE = (int) 0x00000008;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int CALLBACK_DATA_TYPE = (int) 0x00000080;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int NO_LOGGING_MODE = (int) 3;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int IN_BUF_SIZE = (int) 16384;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int MDM = (int) 1;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int SOCKET_MODE = (int) 5;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int MODE_REALTIME = (int) 1;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int DCI_PKT_TYPE = (int) 0x00000400;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int DIAG_PROC_MEMORY_DEVICE = (int) 2;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_STATUS_CLOSED = (int) (0x00020000);
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DISABLE = (int) 0;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int DEINIT_TYPE = (int) 0x00000010;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int MODE_NONREALTIME = (int) 0;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int EVENT_MASKS_TYPE = (int) 0x00000004;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int FILE_NAME_LEN = (int) 100;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int ENABLE = (int) 1;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int DCI_DATA_TYPE = (int) 0x00000040;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int UART_MODE = (int) 4;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int QSC_TOKEN = (int) -5;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DCI_PKT_RSP_TYPE = (int) 0;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int DCI_MAX_REQ_BUF_SIZE = (int) (4096 - 8);
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DCI_LOG_TYPE = (int) -1;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_LPASS_PROC = (int) 1;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_INVALID_SIGNAL = (int) 0;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_ALL_PROC = (int) -1;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int MEMORY_DEVICE_MODE = (int) 2;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_CON_WCNSS = (int) (0x0008);
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int MAX_NUM_FILES_ON_DEVICE = (int) 2000;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int DCI_LOG_MASKS_TYPE = (int) 0x00000100;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int LOG_MASKS_TYPE = (int) 0x00000002;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int CALLBACK_MODE = (int) 6;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_CON_APSS = (int) (0x0001);
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int NUM_PROC = (int) 10;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_CON_LPASS = (int) (0x0004);
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int QSC = (int) 2;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int DCI_EVENT_MASKS_TYPE = (int) 0x00000200;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int MSM = (int) 0;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_CON_MPSS = (int) (0x0002);
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_APPS_PROC = (int) 3;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int MSG_MASKS_TYPE = (int) 0x00000001;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int MDM_TOKEN = (int) -1;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_WCNSS_PROC = (int) 2;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_MODEM_PROC = (int) 0;
    /**
     * <i>native declaration : diag/include/diag_lsm.h</i>
     */
    public static final int USB_MODE = (int) 1;
    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h</i>
     */
    public static final int DIAG_STATUS_OPEN = (int) (0x00010000);
    ;

    /**
     * Internal function used for DCI related initializations<br>
     * Original signature : <code>int diag_lsm_dci_init()</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:11</i>
     */
    int diag_lsm_dci_init();

    ;

    /**
     * Internal function used by LSM to find transaction related information<br>
     * Original signature : <code>void lookup_pkt_rsp_transaction(unsigned char*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:16</i><br>
     *
     * @deprecated use the safer methods {@link #lookup_pkt_rsp_transaction(java.nio.ByteBuffer)} and {@link #lookup_pkt_rsp_transaction(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void lookup_pkt_rsp_transaction(Pointer ptr);

    ;

    /**
     * Internal function used by LSM to find transaction related information<br>
     * Original signature : <code>void lookup_pkt_rsp_transaction(unsigned char*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:16</i>
     */
    void lookup_pkt_rsp_transaction(ByteBuffer ptr);

    ;

    /**
     * Internal function used to parse each and every line in the DCI Input file<br>
     * Original signature : <code>int dci_parse_line(char*, int*, diag_dci_peripherals*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:94</i><br>
     *
     * @deprecated use the safer methods {@link #dci_parse_line(java.nio.ByteBuffer, java.nio.IntBuffer, java.nio.ShortBuffer)} and {@link #dci_parse_line(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    int dci_parse_line(Pointer str, IntByReference client_id, ShortByReference list);

    ;

    /**
     * Internal function used to parse each and every line in the DCI Input file<br>
     * Original signature : <code>int dci_parse_line(char*, int*, diag_dci_peripherals*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:94</i>
     */
    int dci_parse_line(ByteBuffer str, IntBuffer client_id, ShortBuffer list);

    /**
     * Internal function - handler for response; prints the response packet to the file<br>
     * Original signature : <code>void process_response(unsigned char*, int, void*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:99</i><br>
     *
     * @deprecated use the safer methods {@link #process_response(java.nio.ByteBuffer, int, com.sun.jna.Pointer)} and {@link #process_response(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void process_response(Pointer ptr, int len, Pointer data_ptr);

    /**
     * Internal function - handler for response; prints the response packet to the file<br>
     * Original signature : <code>void process_response(unsigned char*, int, void*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:99</i>
     */
    void process_response(ByteBuffer ptr, int len, Pointer data_ptr);

    /**
     * Internal function to convert a string to an Interger - Takes care of<br>
     * Hexadecimal numbers too<br>
     * Original signature : <code>int to_integer(char*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:105</i><br>
     *
     * @deprecated use the safer methods {@link #to_integer(java.nio.ByteBuffer)} and {@link #to_integer(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    int to_integer(Pointer str);

    /**
     * Internal function to convert a string to an Interger - Takes care of<br>
     * Hexadecimal numbers too<br>
     * Original signature : <code>int to_integer(char*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:105</i>
     */
    int to_integer(ByteBuffer str);

    /**
     * Internal function - handler for logs; prints the log packet to the file<br>
     * Original signature : <code>void process_dci_log_stream(unsigned char*, int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:110</i><br>
     *
     * @deprecated use the safer methods {@link #process_dci_log_stream(java.nio.ByteBuffer, int)} and {@link #process_dci_log_stream(com.sun.jna.Pointer, int)} instead
     */
    @Deprecated
    void process_dci_log_stream(Pointer ptr, int len);

    /**
     * Internal function - handler for logs; prints the log packet to the file<br>
     * Original signature : <code>void process_dci_log_stream(unsigned char*, int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:110</i>
     */
    void process_dci_log_stream(ByteBuffer ptr, int len);

    /**
     * Internal function - handler for events; prints the event packet to the file<br>
     * Original signature : <code>void process_dci_event_stream(unsigned char*, int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:115</i><br>
     *
     * @deprecated use the safer methods {@link #process_dci_event_stream(java.nio.ByteBuffer, int)} and {@link #process_dci_event_stream(com.sun.jna.Pointer, int)} instead
     */
    @Deprecated
    void process_dci_event_stream(Pointer ptr, int len);

    /**
     * Internal function - handler for events; prints the event packet to the file<br>
     * Original signature : <code>void process_dci_event_stream(unsigned char*, int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:115</i>
     */
    void process_dci_event_stream(ByteBuffer ptr, int len);

    /**
     * Initialization function required for DCI functions. Input parameters are:<br>
     * a) pointer to an int which holds client id<br>
     * b) pointer to a bit mask which holds peripheral information,<br>
     * c) an int to specify which diag instance to use (to be used for fusion targets, not implemented as of now),<br>
     * d) void* for future needs (not implemented as of now)<br>
     * Original signature : <code>int diag_register_dci_client(int*, diag_dci_peripherals*, int, void*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:124</i><br>
     *
     * @deprecated use the safer methods {@link #diag_register_dci_client(java.nio.IntBuffer, java.nio.ShortBuffer, int, com.sun.jna.Pointer)} and {@link #diag_register_dci_client(com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.ShortByReference, int, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    int diag_register_dci_client(IntByReference intPtr1, ShortByReference diag_dci_peripheralsPtr1, int int1, Pointer voidPtr1);

    /**
     * Initialization function required for DCI functions. Input parameters are:<br>
     * a) pointer to an int which holds client id<br>
     * b) pointer to a bit mask which holds peripheral information,<br>
     * c) an int to specify which diag instance to use (to be used for fusion targets, not implemented as of now),<br>
     * d) void* for future needs (not implemented as of now)<br>
     * Original signature : <code>int diag_register_dci_client(int*, diag_dci_peripherals*, int, void*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:124</i>
     */
    int diag_register_dci_client(IntBuffer intPtr1, ShortBuffer diag_dci_peripheralsPtr1, int int1, Pointer voidPtr1);

    /**
     * This provides information on which peripherals are supporting DCI<br>
     * User needs to pass a pointer to the bit mask described above<br>
     * Original signature : <code>int diag_get_dci_support_list(diag_dci_peripherals*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:130</i><br>
     *
     * @deprecated use the safer methods {@link #diag_get_dci_support_list(java.nio.ShortBuffer)} and {@link #diag_get_dci_support_list(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    int diag_get_dci_support_list(ShortByReference diag_dci_peripheralsPtr1);

    /**
     * This provides information on which peripherals are supporting DCI<br>
     * User needs to pass a pointer to the bit mask described above<br>
     * Original signature : <code>int diag_get_dci_support_list(diag_dci_peripherals*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:130</i>
     */
    int diag_get_dci_support_list(ShortBuffer diag_dci_peripheralsPtr1);

    /**
     * Main command to send the DCI request. Input parameters are:<br>
     * a) client ID generate earlier<br>
     * b) request buffer<br>
     * c) request buffer length<br>
     * d) response buffer<br>
     * e) response buffer length<br>
     * f) call back function pointer<br>
     * g) data pointer<br>
     * Original signature : <code>int diag_send_dci_async_req(int, unsigned char[], int, unsigned char*, int, diag_send_dci_async_req_func_ptr_callback*, void*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:142</i><br>
     *
     * @deprecated use the safer methods {@link #diag_send_dci_async_req(int, java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, com.jdsu.drivetest.diag.DiagLibrary.diag_send_dci_async_req_func_ptr_callback, com.sun.jna.Pointer)} and {@link #diag_send_dci_async_req(int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int, com.jdsu.drivetest.diag.DiagLibrary.diag_send_dci_async_req_func_ptr_callback, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    int diag_send_dci_async_req(int client_id, Pointer buf, int bytes, Pointer rsp_ptr, int rsp_len, diag_send_dci_async_req_func_ptr_callback func_ptr, Pointer data_ptr);

    /**
     * Main command to send the DCI request. Input parameters are:<br>
     * a) client ID generate earlier<br>
     * b) request buffer<br>
     * c) request buffer length<br>
     * d) response buffer<br>
     * e) response buffer length<br>
     * f) call back function pointer<br>
     * g) data pointer<br>
     * Original signature : <code>int diag_send_dci_async_req(int, unsigned char[], int, unsigned char*, int, diag_send_dci_async_req_func_ptr_callback*, void*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:142</i>
     */
    int diag_send_dci_async_req(int client_id, ByteBuffer buf, int bytes, ByteBuffer rsp_ptr, int rsp_len, diag_send_dci_async_req_func_ptr_callback func_ptr, Pointer data_ptr);

    /**
     * Closes DCI connection for this client. The client needs to pass a pointer<br>
     * to the client id generated earlier<br>
     * Original signature : <code>int diag_release_dci_client(int*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:148</i><br>
     *
     * @deprecated use the safer methods {@link #diag_release_dci_client(java.nio.IntBuffer)} and {@link #diag_release_dci_client(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    int diag_release_dci_client(IntByReference intPtr1);

    /**
     * Closes DCI connection for this client. The client needs to pass a pointer<br>
     * to the client id generated earlier<br>
     * Original signature : <code>int diag_release_dci_client(int*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:148</i>
     */
    int diag_release_dci_client(IntBuffer intPtr1);

    /**
     * Used to set up log streaming to the client. This will send an array of log codes, which are desired<br>
     * by client. Input parameters are:<br>
     * 1. Client ID<br>
     * 2. Boolean value telling to set or disable logs specified later<br>
     * 3. Array of log codes<br>
     * 4. Number of log codes specified in argument 3<br>
     * Original signature : <code>int diag_log_stream_config(int, int, uint16[], int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:158</i><br>
     *
     * @deprecated use the safer methods {@link #diag_log_stream_config(int, int, java.nio.ShortBuffer, int)} and {@link #diag_log_stream_config(int, int, com.sun.jna.ptr.ShortByReference, int)} instead
     */
    @Deprecated
    int diag_log_stream_config(int client_id, int set_mask, ShortByReference log_codes_array, int num_codes);

    /**
     * Used to set up log streaming to the client. This will send an array of log codes, which are desired<br>
     * by client. Input parameters are:<br>
     * 1. Client ID<br>
     * 2. Boolean value telling to set or disable logs specified later<br>
     * 3. Array of log codes<br>
     * 4. Number of log codes specified in argument 3<br>
     * Original signature : <code>int diag_log_stream_config(int, int, uint16[], int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:158</i>
     */
    int diag_log_stream_config(int client_id, int set_mask, ShortBuffer log_codes_array, int num_codes);

    /**
     * Initialization function required for DCI streaming. Input parameters are:<br>
     * call back function pointer<br>
     * Original signature : <code>int diag_register_dci_stream(diag_register_dci_stream_func_ptr_logs_callback*, diag_register_dci_stream_func_ptr_events_callback*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:164</i>
     */
    int diag_register_dci_stream(diag_register_dci_stream_func_ptr_logs_callback func_ptr_logs, diag_register_dci_stream_func_ptr_events_callback func_ptr_events);

    /**
     * Used to set up event streaming to the client. This will send an array of event ids, which are desired<br>
     * by client. Input parameters are:<br>
     * 1. Client ID<br>
     * 2. Boolean value telling to set or disable event specified later<br>
     * 3. Array of event id<br>
     * 4. Number of event ids specified in argument 3<br>
     * Original signature : <code>int diag_event_stream_config(int, int, int[], int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:174</i><br>
     *
     * @deprecated use the safer methods {@link #diag_event_stream_config(int, int, java.nio.IntBuffer, int)} and {@link #diag_event_stream_config(int, int, com.sun.jna.ptr.IntByReference, int)} instead
     */
    @Deprecated
    int diag_event_stream_config(int client_id, int set_mask, IntByReference event_id_array, int num_codes);

    /**
     * Used to set up event streaming to the client. This will send an array of event ids, which are desired<br>
     * by client. Input parameters are:<br>
     * 1. Client ID<br>
     * 2. Boolean value telling to set or disable event specified later<br>
     * 3. Array of event id<br>
     * 4. Number of event ids specified in argument 3<br>
     * Original signature : <code>int diag_event_stream_config(int, int, int[], int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:174</i>
     */
    int diag_event_stream_config(int client_id, int set_mask, IntBuffer event_id_array, int num_codes);

    /**
     * Used to query DCI statistics on all processors for logs & events<br>
     * Original signature : <code>int diag_get_health_stats(diag_dci_health_stats*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:179</i>
     */
    int diag_get_health_stats(diag_dci_health_stats dci_health);

    /**
     * Used to query DCI statistics on a specific processor for logs & events<br>
     * Original signature : <code>int diag_get_health_stats_proc(int, diag_dci_health_stats*, int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:184</i>
     */
    int diag_get_health_stats_proc(int client_id, diag_dci_health_stats dci_health, int proc);

    /**
     * Queries a given Log Code to check if it is enabled or not. Input parameters are:<br>
     * 1. Client ID<br>
     * 2. Log Code that needs to be checked<br>
     * 3. Pointer to boolean to store the result<br>
     * Original signature : <code>int diag_get_log_status(int, uint16, boolean*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:192</i><br>
     *
     * @deprecated use the safer methods {@link #diag_get_log_status(int, short, java.nio.IntBuffer)} and {@link #diag_get_log_status(int, short, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    int diag_get_log_status(int client_id, short log_code, IntByReference value);

    /**
     * Queries a given Log Code to check if it is enabled or not. Input parameters are:<br>
     * 1. Client ID<br>
     * 2. Log Code that needs to be checked<br>
     * 3. Pointer to boolean to store the result<br>
     * Original signature : <code>int diag_get_log_status(int, uint16, boolean*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:192</i>
     */
    int diag_get_log_status(int client_id, short log_code, IntBuffer value);

    /**
     * Queries a given Event ID to check if it is enabled or not. Input parameters are:<br>
     * 1. Client ID<br>
     * 2. Event ID that needs to be checked<br>
     * 3. Pointer to boolean to store the result<br>
     * Original signature : <code>int diag_get_event_status(int, uint16, boolean*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:200</i><br>
     *
     * @deprecated use the safer methods {@link #diag_get_event_status(int, short, java.nio.IntBuffer)} and {@link #diag_get_event_status(int, short, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    int diag_get_event_status(int client_id, short event_id, IntByReference value);

    /**
     * Queries a given Event ID to check if it is enabled or not. Input parameters are:<br>
     * 1. Client ID<br>
     * 2. Event ID that needs to be checked<br>
     * 3. Pointer to boolean to store the result<br>
     * Original signature : <code>int diag_get_event_status(int, uint16, boolean*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:200</i>
     */
    int diag_get_event_status(int client_id, short event_id, IntBuffer value);

    /**
     * Disables all the Log Codes for a given client. The Input parameters are:<br>
     * 1. Client ID<br>
     * Original signature : <code>int diag_disable_all_logs(int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:206</i>
     */
    int diag_disable_all_logs(int client_id);

    /**
     * Disables all the Event ID for a given client. The Input parameters are:<br>
     * 1. Client ID<br>
     * Original signature : <code>int diag_disable_all_events(int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:212</i>
     */
    int diag_disable_all_events(int client_id);

    /**
     * Votes for real time or non real time mode. The Input paramters are:<br>
     * 1. Client ID<br>
     * 2. The desired mode - MODE_REALTIME or MODE_NONREALTIME<br>
     * Original signature : <code>int diag_dci_vote_real_time(int, int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:219</i>
     */
    int diag_dci_vote_real_time(int client_id, int real_time);

    /**
     * Gets the current mode (Real time or Non Real Time ) Diag is in.<br>
     * The Input parameters are:<br>
     * 1. A pointer to an integer that will hold the result<br>
     * Original signature : <code>int diag_dci_get_real_time_status(int*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:226</i><br>
     *
     * @deprecated use the safer methods {@link #diag_dci_get_real_time_status(java.nio.IntBuffer)} and {@link #diag_dci_get_real_time_status(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    int diag_dci_get_real_time_status(IntByReference real_time);

    /**
     * Gets the current mode (Real time or Non Real Time ) Diag is in.<br>
     * The Input parameters are:<br>
     * 1. A pointer to an integer that will hold the result<br>
     * Original signature : <code>int diag_dci_get_real_time_status(int*)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:226</i>
     */
    int diag_dci_get_real_time_status(IntBuffer real_time);

    /**
     * Registers a signal to be fired on receiving DCI data from<br>
     * the peripherals. The input parameters are:<br>
     * 1. Client ID<br>
     * 2. Signal Type<br>
     * Original signature : <code>int diag_register_dci_signal_data(int, int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:234</i>
     */
    int diag_register_dci_signal_data(int client_id, int signal_type);

    /**
     * Disables the signal that fires on receiving DCI data from<br>
     * the peripherals. The input parameters are:<br>
     * 1. Client ID<br>
     * 2. Signal Type<br>
     * Original signature : <code>int diag_deregister_dci_signal_data(int)</code><br>
     * <i>native declaration : diag/include/diag_lsm_dci.h:242</i>
     */
    int diag_deregister_dci_signal_data(int client_id);

    /**
     * ===========================================================================<br>
     * FUNCTION   Diag_LSM_Init<br>
     * DESCRIPTION<br>
     * Initializes the Diag Legacy Mapping Layer. This should be called<br>
     * only once per process.<br>
     * DEPENDENCIES<br>
     * Successful initialization requires Diag CS component files to be present<br>
     * and accessible in the file system.<br>
     * RETURN VALUE<br>
     * FALSE = failure, else TRUE<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>boolean Diag_LSM_Init(byte*)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:32</i><br>
     *
     * @deprecated use the safer methods {@link #Diag_LSM_Init(java.nio.ByteBuffer)} and {@link #Diag_LSM_Init(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    int Diag_LSM_Init(Pointer pIEnv);

    /**
     * ===========================================================================<br>
     * FUNCTION   Diag_LSM_Init<br>
     * DESCRIPTION<br>
     * Initializes the Diag Legacy Mapping Layer. This should be called<br>
     * only once per process.<br>
     * DEPENDENCIES<br>
     * Successful initialization requires Diag CS component files to be present<br>
     * and accessible in the file system.<br>
     * RETURN VALUE<br>
     * FALSE = failure, else TRUE<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>boolean Diag_LSM_Init(byte*)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:32</i>
     */
    int Diag_LSM_Init(ByteBuffer pIEnv);

    /**
     * ===========================================================================<br>
     * FUNCTION   diag_switch_logging<br>
     * DESCRIPTION<br>
     * This swtiches the logging mode from default USB to memory device logging<br>
     * DEPENDENCIES<br>
     * valid data type to be passed in:<br>
     * In case of ODL second argument is to specifying directory location.<br>
     * In case of UART mode second argument is specify PROC type.<br>
     * RETURN VALUE<br>
     * None<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>void diag_switch_logging(int, char*)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:49</i><br>
     *
     * @deprecated use the safer methods {@link #diag_switch_logging(int, java.nio.ByteBuffer)} and {@link #diag_switch_logging(int, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void diag_switch_logging(int mode, Pointer dir_location);

    /**
     * ===========================================================================<br>
     * FUNCTION   diag_switch_logging<br>
     * DESCRIPTION<br>
     * This swtiches the logging mode from default USB to memory device logging<br>
     * DEPENDENCIES<br>
     * valid data type to be passed in:<br>
     * In case of ODL second argument is to specifying directory location.<br>
     * In case of UART mode second argument is specify PROC type.<br>
     * RETURN VALUE<br>
     * None<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>void diag_switch_logging(int, char*)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:49</i>
     */
    void diag_switch_logging(int mode, ByteBuffer dir_location);

    /**
     * ===========================================================================<br>
     * FUNCTION   diag_read_mask_file<br>
     * DESCRIPTION<br>
     * This reads the mask file<br>
     * DEPENDENCIES<br>
     * valid data type to be passed in<br>
     * RETURN VALUE<br>
     * None<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>int diag_read_mask_file()</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:64</i>
     */
    int diag_read_mask_file();

    /**
     * ===========================================================================<br>
     * FUNCTION   diag_register_callback<br>
     * DESCRIPTION<br>
     * This allows diag client to register a callback function with LSM library.<br>
     * If the library receives data from kernel space, it will invoke this call<br>
     * back function, thus passing the data to the client through this function.<br>
     * DEPENDENCIES<br>
     * valid data type to be passed in<br>
     * RETURN VALUE<br>
     * None<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>void diag_register_callback(diag_register_callback_client_cb_func_ptr_callback*, void*)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:81</i>
     */
    void diag_register_callback(diag_register_callback_client_cb_func_ptr_callback client_cb_func_ptr, Pointer context_data);

    /**
     * ===========================================================================<br>
     * FUNCTION   diag_register_remote_callback<br>
     * DESCRIPTION<br>
     * This allows diag client to register a callback function with LSM library.<br>
     * If the library receives data from kernel space originating from the remote<br>
     * processor, it will invoke this call back function, thus passing the data<br>
     * to the client through this function.<br>
     * DEPENDENCIES<br>
     * valid data type to be passed in<br>
     * RETURN VALUE<br>
     * None<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>void diag_register_remote_callback(diag_register_remote_callback_client_rmt_cb_func_ptr_callback*, int, void*)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:99</i>
     */
    void diag_register_remote_callback(diag_register_remote_callback_client_rmt_cb_func_ptr_callback client_rmt_cb_func_ptr, int proc, Pointer context_data);

    /**
     * ===========================================================================<br>
     * FUNCTION    diag_send_data<br>
     * DESCRIPTION<br>
     * Inject data into diag kernel driver<br>
     * DEPENDENCIES<br>
     * None.<br>
     * RETURN VALUE<br>
     * FALSE = failure, else TRUE.<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>int diag_send_data(unsigned char*, int)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:114</i><br>
     *
     * @deprecated use the safer methods {@link #diag_send_data(java.nio.ByteBuffer, int)} and {@link #diag_send_data(com.sun.jna.Pointer, int)} instead
     */
    @Deprecated
    int diag_send_data(Pointer charPtr1, int int1);

    /**
     * ===========================================================================<br>
     * FUNCTION    diag_send_data<br>
     * DESCRIPTION<br>
     * Inject data into diag kernel driver<br>
     * DEPENDENCIES<br>
     * None.<br>
     * RETURN VALUE<br>
     * FALSE = failure, else TRUE.<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>int diag_send_data(unsigned char*, int)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:114</i>
     */
    int diag_send_data(ByteBuffer charPtr1, int int1);

    /**
     * ===========================================================================<br>
     * FUNCTION    diag_callback_send_data<br>
     * DESCRIPTION<br>
     * Inject data into diag kernel driver for a specific processor in<br>
     * callback mode<br>
     * DEPENDENCIES<br>
     * None.<br>
     * RETURN VALUE<br>
     * FALSE = failure, else TRUE.<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>int diag_callback_send_data(int, unsigned char*, int)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:130</i><br>
     *
     * @deprecated use the safer methods {@link #diag_callback_send_data(int, java.nio.ByteBuffer, int)} and {@link #diag_callback_send_data(int, com.sun.jna.Pointer, int)} instead
     */
    @Deprecated
    int diag_callback_send_data(int proc, Pointer buf, int len);

    /**
     * ===========================================================================<br>
     * FUNCTION    diag_callback_send_data<br>
     * DESCRIPTION<br>
     * Inject data into diag kernel driver for a specific processor in<br>
     * callback mode<br>
     * DEPENDENCIES<br>
     * None.<br>
     * RETURN VALUE<br>
     * FALSE = failure, else TRUE.<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>int diag_callback_send_data(int, unsigned char*, int)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:130</i>
     */
    int diag_callback_send_data(int proc, ByteBuffer buf, int len);

    /**
     * ===========================================================================<br>
     * FUNCTION    diag_vote_md_real_time<br>
     * DESCRIPTION<br>
     * Votes the on device logging process for real/non-real time<br>
     * mode<br>
     * DEPENDENCIES<br>
     * None.<br>
     * RETURN VALUE<br>
     * 0 = success, -1 = failure<br>
     * SIDE EFFECTS<br>
     * Puts the entire diag in the mode specified if the process wins<br>
     * the vote<br>
     * ===========================================================================<br>
     * Original signature : <code>int diag_vote_md_real_time(int)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:147</i>
     */
    int diag_vote_md_real_time(int real_time);

    /**
     * ===========================================================================<br>
     * FUNCTION    diag_get_real_time_status<br>
     * DESCRIPTION<br>
     * Gets the mode (real time or non real time) in which Diag is in<br>
     * DEPENDENCIES<br>
     * None.<br>
     * RETURN VALUE<br>
     * 0 = success, -1 = failure<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>int diag_get_real_time_status(int*)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:162</i><br>
     *
     * @deprecated use the safer methods {@link #diag_get_real_time_status(java.nio.IntBuffer)} and {@link #diag_get_real_time_status(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    int diag_get_real_time_status(IntByReference real_time);

    /**
     * ===========================================================================<br>
     * FUNCTION    diag_get_real_time_status<br>
     * DESCRIPTION<br>
     * Gets the mode (real time or non real time) in which Diag is in<br>
     * DEPENDENCIES<br>
     * None.<br>
     * RETURN VALUE<br>
     * 0 = success, -1 = failure<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>int diag_get_real_time_status(int*)</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:162</i>
     */
    int diag_get_real_time_status(IntBuffer real_time);

    /**
     * ===========================================================================<br>
     * FUNCTION    Diag_LSM_DeInit<br>
     * DESCRIPTION<br>
     * De-Initialize the Diag service.<br>
     * DEPENDENCIES<br>
     * None.<br>
     * RETURN VALUE<br>
     * FALSE = failure, else TRUE.<br>
     * Currently all the internal boolean return functions called by<br>
     * this function just returns TRUE w/o doing anything.<br>
     * SIDE EFFECTS<br>
     * None<br>
     * ===========================================================================<br>
     * Original signature : <code>boolean Diag_LSM_DeInit()</code><br>
     * <i>native declaration : diag/include/diag_lsm.h:179</i>
     */
    int Diag_LSM_DeInit();

    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h:263</i><br>
     * enum values
     */
    public static interface diag_dci_error_type_enum {
        /**
         * No error<br>
         * <i>native declaration : diag/include/diag_lsm_dci.h:255</i>
         */
        public static final int DIAG_DCI_NO_ERROR = 1001;
        /**
         * Could not register<br>
         * <i>native declaration : diag/include/diag_lsm_dci.h:256</i>
         */
        public static final int DIAG_DCI_NO_REG = 1002;
        /**
         * Failed memory allocation<br>
         * <i>native declaration : diag/include/diag_lsm_dci.h:257</i>
         */
        public static final int DIAG_DCI_NO_MEM = 1003;
        /**
         * This particular client is not supported<br>
         * <i>native declaration : diag/include/diag_lsm_dci.h:258</i>
         */
        public static final int DIAG_DCI_NOT_SUPPORTED = 1004;
        /**
         * Request/Response Packet too huge<br>
         * <i>native declaration : diag/include/diag_lsm_dci.h:259</i>
         */
        public static final int DIAG_DCI_HUGE_PACKET = 1005;
        /**
         * writing to kernel or remote peripheral fails<br>
         * <i>native declaration : diag/include/diag_lsm_dci.h:260</i>
         */
        public static final int DIAG_DCI_SEND_DATA_FAIL = 1006;
        /**
         * Error while de-registering<br>
         * <i>native declaration : diag/include/diag_lsm_dci.h:261</i>
         */
        public static final int DIAG_DCI_ERR_DEREG = 1007;
        /**
         * Incorrect Parameter<br>
         * <i>native declaration : diag/include/diag_lsm_dci.h:262</i>
         */
        public static final int DIAG_DCI_PARAM_FAIL = 1008;
    }

    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h:264</i>
     */
    public interface diag_send_dci_async_req_func_ptr_callback extends Callback {
        void apply(Pointer ptr, int len, Pointer data_ptr);
    }

    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h:265</i>
     */
    public interface diag_register_dci_stream_func_ptr_logs_callback extends Callback {
        void apply(Pointer ptr, int len);
    }

    /**
     * <i>native declaration : diag/include/diag_lsm_dci.h:266</i>
     */
    public interface diag_register_dci_stream_func_ptr_events_callback extends Callback {
        void apply(Pointer ptr, int len);
    }

    /**
     * <i>native declaration : diag/include/diag_lsm.h:180</i>
     */
    public interface diag_register_callback_client_cb_func_ptr_callback extends Callback {
        int apply(Pointer ptr, int len, Pointer context_data);
    }

    /**
     * <i>native declaration : diag/include/diag_lsm.h:181</i>
     */
    public interface diag_register_remote_callback_client_rmt_cb_func_ptr_callback extends Callback {
        int apply(Pointer ptr, int len, Pointer context_data);
    }

    ;

    public static final class mask_file {
        private static Pointer mask_file;

        public static synchronized Pointer get() {
            if ((mask_file == null))
                mask_file = DiagLibrary.JNA_NATIVE_LIB.getGlobalVariableAddress("mask_file");
            return mask_file;
        }
    }

    ;

    public static final class mask_file_mdm {
        private static Pointer mask_file_mdm;

        public static synchronized Pointer get() {
            if ((mask_file_mdm == null))
                mask_file_mdm = DiagLibrary.JNA_NATIVE_LIB.getGlobalVariableAddress("mask_file_mdm");
            return mask_file_mdm;
        }
    }

    ;

    public static final class output_dir {
        private static Pointer output_dir;

        public static synchronized Pointer get() {
            if ((output_dir == null))
                output_dir = DiagLibrary.JNA_NATIVE_LIB.getGlobalVariableAddress("output_dir");
            return output_dir;
        }
    }

    public static final class dir_name {
        private static Pointer dir_name;

        public static synchronized Pointer get() {
            if ((dir_name == null))
                dir_name = DiagLibrary.JNA_NATIVE_LIB.getGlobalVariableAddress("dir_name");
            return dir_name;
        }
    }

    ;

    public static class pthread_mutex_t extends PointerType {
        public pthread_mutex_t(Pointer address) {
            super(address);
        }

        public pthread_mutex_t() {
            super();
        }
    }

    ;
}
