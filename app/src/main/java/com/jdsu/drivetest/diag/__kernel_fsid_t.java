package com.jdsu.drivetest.diag;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : asm/posix_types.h:40</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class __kernel_fsid_t extends Structure {
    /**
     * C type : int[2]
     */
    public int[] __val = new int[2];

    public __kernel_fsid_t() {
        super();
    }

    /**
     * @param __val C type : int[2]
     */
    public __kernel_fsid_t(int __val[]) {
        super();
        if ((__val.length != this.__val.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.__val = __val;
    }

    public __kernel_fsid_t(Pointer peer) {
        super(peer);
    }

    protected List<?> getFieldOrder() {
        return Arrays.asList("__val");
    }

    public static class ByReference extends __kernel_fsid_t implements Structure.ByReference {

    }

    ;

    public static class ByValue extends __kernel_fsid_t implements Structure.ByValue {

    }

    ;
}
